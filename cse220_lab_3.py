# -*- coding: utf-8 -*-
"""CSE220 Lab 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WWH0iNLlLH9EyZ_l0j0gQMEPbqBn0F3q

1.   Be careful in which question you are required to change the given Linked list and where you are required to create a new one
2.   Be careful of the first node and the last node [aka corner cases]
3.   Do not use any other data structure other than Linked List

***You must run this cell to install dependency***
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

""" ***You must Run this cell for your driver code to execute successfully***"""

#Run this cell
class Node:
  def __init__(self,elem,next = None):
    self.elem = elem
    self.next = next

def createList(arr):
  head = Node(arr[0])
  tail = head
  for i in range(1,len(arr)):
    newNode = Node(arr[i])
    tail.next = newNode
    tail = newNode
  return head

def printLinkedList(head):
  temp = head
  while temp != None:
    if temp.next != None:
      print(temp.elem, end = '-->')
    else:
      print(temp.elem)
    temp = temp.next
  print()

"""Number Beads"""

def rotation_times(head):
  temp = head
  count = 0

  while temp.elem != 20:
    temp = temp.next
    count += 1

  return count


print('==============Test Case 1=============')
head = createList(np.array([13,10,6,20,17]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 3
unittest.output_test(returned_value, 3)
print()

print('==============Test Case 2=============')
head = createList(np.array([6,20,17,13,10]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 1
unittest.output_test(returned_value, 1)
print()

print('==============Test Case 3=============')
head = createList(np.array([20,17,13,10,6]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 0
unittest.output_test(returned_value, 0)
print()

"""Building Blocks"""

def check_similar(building_1, building_2):
  similarity = False
  def countNodes(a):
    temp = a
    count = 0
    while temp != None:
      count += 1
      temp = temp.next
    return count

  b1_count = countNodes(building_1)
  b2_count = countNodes(building_2)

  if b1_count != b2_count:
    return "Not Similar"
  else:
    temp1 = building_1
    temp2 = building_2

    while temp1 != None:
      if temp1.elem != temp2.elem:
        return "Not Similar"
      temp1 = temp1.next
      temp2 = temp2.next

  return "Similar"


print('==============Test Case 1=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Similar'
unittest.output_test(returned_value, 'Similar')
print()

print('==============Test Case 2=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Yellow', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

print('==============Test Case 3=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

print('==============Test Case 4=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

"""Remove Compartment"""

def remove_compartment(head,n):
  temp = head
  count = 0

  while temp != None:
    if temp.elem == n:
      count += 1
    temp = temp.next

  temp1 = head
  temp2 = temp1.next

  if count > 1:
    while temp2 != None:
      if temp2.elem == n:
        count -= 1
        if count == 0:
          backup = temp2
          temp1.next = backup.next
          backup.next = None
          break
      temp2 = temp2.next
      temp1 = temp1.next

    temp1 = head
  elif count == 1 and temp1.elem == n:
    backup = head
    temp1 = head.next
    backup.next = None

  return temp1




print('==============Test Case 1=============')
head = createList(np.array([14,10,15,10,41,10,72]))
number = 10
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 14-->10-->15-->10-->41-->72
print()

print('==============Test Case 2=============')
head = createList(np.array([10,15,33,41,14,72]))
number = 10
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 15-->33-->41-->14-->72
print()

print('==============Test Case 3=============')
head = createList(np.array([10,15,33,41,14,72]))
number = 56
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 10-->15-->33-->41-->14-->72
print()

"""Capture the Flag"""

def capture_the_flag(head):
  temp = head
  x = 1

  while temp != None:
    if temp.elem % x == 0:
      temp.elem = int(temp.elem / x)
      temp = temp.next
      x += 1
    else:
      return "Linkwise"

  return head

print('==============Test Case 1=============')
head = createList(np.array([11,8,21,20,5,42]))
print('Original Sequence: ', end = ' ')
printLinkedList(head)
new_head = capture_the_flag(head)
print('The flag is: ', end= ' ')
if type(new_head) == str:
  print(new_head)
else:
  printLinkedList(new_head) #This should print 11→4→7→5→1→7
print()

print('==============Test Case 2=============')
head = createList(np.array([11,8,28,20,5,42]))
print('Original Sequence: ', end = ' ')
printLinkedList(head)
new_head = capture_the_flag(head)
print('The flag is: ', end= ' ')
if type(new_head) == str:
  print(new_head) #This should print Linkwise
else:
  printLinkedList(new_head)
print()

"""Shuffle on song"""

def shuffle_on_song(head):
  temp = head

  def countNodes(a):
    temp = a
    count = 0
    while temp != None:
      count += 1
      temp = temp.next
    return count

  newly_created = createList([0] * countNodes(head))
  new_head = newly_created

  temp = head

  while temp != None:
    if int(ord(temp.elem)) % 2 == 0:
      new_head.elem = temp.elem
      new_head = new_head.next
    temp = temp.next

  temp = head

  while temp != None:
    if int(ord(temp.elem)) % 2 != 0:
      new_head.elem = temp.elem
      new_head = new_head.next
    temp = temp.next

  return newly_created



print('==============Test Case 1=============')
head = createList(np.array(['S','E','N','P','A','I']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_song(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print N-->P-->S-->E-->A-->I
print()

print('==============Test Case 2=============')
head = createList(np.array(['N','I','S','H','I','N','O','Y','A']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_song(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print N-->H-->N-->I-->S-->I-->O-->Y-->A
print()

"""BONUS

Assemble Conga Line
"""

def assemble_conga_line(conga_line, candidate_line, idx):
  temp1 = conga_line
  temp2 = candidate_line
  count1 = 0
  x = 99999999
  value1 = None
  value2 = None
  if idx > 0:
    while temp1 != None:
      count1 += 1
      if count1 == idx:
        value1 = temp1.next.elem
        count1 = 0
        break
      temp1 = temp1.next
  else:
    value1 = temp1.elem
  while temp2 != None:
    if 0 < temp2.elem - value1 < x:
      x = temp2.elem - value1
      value2 = temp2.elem
    if 0 < value1 - temp2.elem < x:
      x = value1 - temp2.elem
      value2 = temp2.elem
    temp2 = temp2.next
  new_node = Node(value2)
  if value1 < value2:
    while temp1 != None:
      if temp1.elem == value1:
        new_node.next = temp1.next
        temp1.next = new_node
        break
      temp1 = temp1.next
  elif value1 > value2 and idx != 0:
    while temp1 != None:
      if temp1.next.elem == value1:
        new_node.next = temp1.next
        temp1.next = new_node
        break
      temp1 = temp1.next
  elif idx == 0:
    new_node.next = temp1
    temp1 = new_node
  return conga_line


print('==============Test Case 1=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([16,2,36,52,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 3
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 10-->15-->34-->40-->41-->56-->72
printLinkedList(returned_value)

print('==============Test Case 2=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([6,16,8,36,7,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 0
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 8-->10-->15-->34-->41-->56-->72
printLinkedList(returned_value)

print('==============Test Case 3=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([6,12,8,36,7,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 2
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 10-->15-->34-->36-->41-->56-->72
printLinkedList(returned_value)